@book{bringhurst1996ets,
  title     = {{The Elements of Typographic Style}},
  author    = {Bringhurst, Robert},
  year      = {1996},
  publisher = {Hartley \& Marks}
}

@article{basinMonPolyMonitoringTool2017,
  title        = {The {{MonPoly Monitoring Tool}}.},
  author       = {Basin, David A. and Klaedtke, Felix and Zalinescu, Eugen},
  date         = {2017},
  journaltitle = {RV-CuBES},
  volume       = {3},
  pages        = {19--28},
  file         = {/home/remo/Zotero/storage/P75AMHQ6/Basin et al_2017_The MonPoly Monitoring Tool.pdf}
}



@article{IEEEStandardEXtensible2016,
  title = {{{IEEE Standard}} for {{eXtensible Event Stream}} ({{XES}}) for {{Achieving Interoperability}} in {{Event Logs}} and {{Event Streams}}},
  date = {2016-11},
  journaltitle = {IEEE Std 1849-2016},
  pages = {1--50},
  doi = {10.1109/IEEESTD.2016.7740858},
  abstract = {A grammar for a tag-based language whose aim is to provide designers of information systems with a unified and extensible methodology for capturing systems behaviors by means of event logs and event streams is defined in the XES standard. An XML Schema describing the structure of an XES event log/stream and a XML Schema describing the structure of an extension of such a log/stream are included in this standard. Moreover, a basic collection of so-called XES extension prototypes that provide semantics to certain attributes as recorded in the event log/stream is included in this standard.},
  eventtitle = {{{IEEE Std}} 1849-2016},
  keywords = {Behavioral sciences,event log,Event recognition,event stream,extensions,Grammar,IEEE 1849™,IEEE Standards,Information systems,Semantics,system behavior,XML},
  file = {/home/remo/Zotero/storage/MGHXPQB5/2016_IEEE Standard for eXtensible Event Stream (XES) for Achieving Interoperability.pdf;/home/remo/Zotero/storage/VSLCGNSA/7740858.html}
}



@inproceedings{liExtractingObjectCentricEvent2018,
  title = {Extracting {{Object-Centric Event Logs}} to {{Support Process Mining}} on {{Databases}}},
  booktitle = {Information {{Systems}} in the {{Big Data Era}}},
  author = {Li, Guangming and de Murillas, Eduardo González López and de Carvalho, Renata Medeiros and van der Aalst, Wil M. P.},
  editor = {Mendling, Jan and Mouratidis, Haralambos},
  options = {useprefix=true},
  date = {2018},
  series = {Lecture {{Notes}} in {{Business Information Processing}}},
  pages = {182--199},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-92901-9_16},
  abstract = {Process mining helps organizations to investigate how their operational processes are executed and how these can be improved. Process mining requires event logs extracted from information systems supporting these processes. The eXtensible Event Stream (XES) format is the current standard which requires a case notion to correlate events. However, it has problems to deal with object-centric data (e.g., database tables) due to the existence of one-to-many and many-to-many relations. In this paper, we propose an approach to extract, transform and store object-centric data, resulting in eXtensible Object-Centric (XOC) event logs. The XOC format does not require a case notion to avoid flattening multi-dimensional data. Besides, based on so-called object models which represent the states of a database, a XOC log can reveal the evolution of the database along with corresponding events. Dealing with object-centric data enables new process mining techniques that are able to capture the real processes much better.},
  isbn = {978-3-319-92901-9},
  langid = {english},
  file = {/home/remo/Zotero/storage/D4LTGL7K/Li et al_2018_Extracting Object-Centric Event Logs to Support Process Mining on Databases.pdf}
}



@article{basinMonitoringMetricFirstorder2015,
  title = {Monitoring Metric First-Order Temporal Properties},
  author = {Basin, David and Klaedtke, Felix and Müller, Samuel and Zălinescu, Eugen},
  date = {2015},
  journaltitle = {Journal of the ACM (JACM)},
  volume = {62},
  number = {2},
  pages = {1--45},
  publisher = {{ACM New York, NY, USA}},
  file = {/home/remo/Zotero/storage/TU4XJ3FY/Basin et al_2015_Monitoring metric first-order temporal properties.pdf;/home/remo/Zotero/storage/3F6MSSRA/2699444.html}
}



@inproceedings{pezoaFoundationsJSONSchema2016,
  title = {Foundations of {{JSON}} Schema},
  booktitle = {Proceedings of the 25th {{International Conference}} on {{World Wide Web}}},
  author = {Pezoa, Felipe and Reutter, Juan L. and Suarez, Fernando and Ugarte, Martín and Vrgoč, Domagoj},
  date = {2016},
  pages = {263--273},
  file = {/home/remo/Zotero/storage/ZBNEM7JG/Pezoa et al_2016_Foundations of JSON schema.pdf;/home/remo/Zotero/storage/P83Y84GX/2872427.html}
}



@incollection{bartocciIntroductionRuntimeVerification2018,
  title = {Introduction to {{Runtime Verification}}},
  booktitle = {Lectures on {{Runtime Verification}}: {{Introductory}} and {{Advanced Topics}}},
  author = {Bartocci, Ezio and Falcone, Yliès and Francalanza, Adrian and Reger, Giles},
  editor = {Bartocci, Ezio and Falcone, Yliès},
  date = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--33},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-75632-5_1},
  url = {https://doi.org/10.1007/978-3-319-75632-5_1},
  urldate = {2022-08-23},
  abstract = {The aim of this chapter is to act as a primer for those wanting to learn about Runtime Verification (RV). We start by providing an overview of the main specification languages used for RV. We then introduce the standard terminology necessary to describe the monitoring problem, covering the pragmatic issues of monitoring and instrumentation, and discussing extensively the monitorability problem.},
  isbn = {978-3-319-75632-5},
  langid = {english},
  file = {/home/remo/Zotero/storage/WYHCZRRA/Bartocci et al_2018_Introduction to Runtime Verification.pdf}
}



@incollection{havelundMonitoringEventsThat2018,
  title = {Monitoring Events That Carry Data},
  booktitle = {Lectures on {{Runtime Verification}}},
  author = {Havelund, Klaus and Reger, Giles and Thoma, Daniel and Zălinescu, Eugen},
  date = {2018},
  pages = {61--102},
  publisher = {{Springer}},
  file = {/home/remo/Zotero/storage/4I5TZUGK/Havelund et al_2018_Monitoring events that carry data.pdf;/home/remo/Zotero/storage/ANY8W693/978-3-319-75632-5_3.html}
}



@inproceedings{alurTemporalLogicNested2004,
  title = {A {{Temporal Logic}} of {{Nested Calls}} and {{Returns}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Alur, Rajeev and Etessami, Kousha and Madhusudan, P.},
  editor = {Jensen, Kurt and Podelski, Andreas},
  date = {2004},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {467--481},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-24730-2_35},
  abstract = {Model checking of linear temporal logic (LTL) specifications with respect to pushdown systems has been shown to be a useful tool for analysis of programs with potentially recursive procedures. LTL, however, can specify only regular properties, and properties such as correctness of procedures with respect to pre and post conditions, that require matching of calls and returns, are not regular. We introduce a temporal logic of calls and returns (CaRet) for specification and algorithmic verification of correctness requirements of structured programs. The formulas of CaRet  are interpreted over sequences of propositional valuations tagged with special symbols call and ret. Besides the standard global temporal modalities, CaRet  admits the abstract-next operator that allows a path to jump from a call to the matching return. This operator can be used to specify a variety of non-regular properties such as partial and total correctness of program blocks with respect to pre and post conditions. The abstract versions of the other temporal modalities can be used to specify regular properties of local paths within a procedure that skip over calls to other procedures. CaRet  also admits the caller modality that jumps to the most recent pending call, and such caller modalities allow specification of a variety of security properties that involve inspection of the call-stack. Even though verifying context-free properties of pushdown systems is undecidable, we show that model checking CaRet  formulas against a pushdown model is decidable. We present a tableau construction that reduces our model checking problem to the emptiness problem for a Büchi pushdown system. The complexity of model checking CaRet  formulas is the same as that of checking LTL formulas, namely, polynomial in the model and singly exponential in the size of the specification.},
  isbn = {978-3-540-24730-2},
  langid = {english},
  keywords = {Acceptance Condition,Atomic Proposition,Linear Temporal Logic,Security Property,Temporal Logic},
  file = {/home/remo/Zotero/storage/46CFZNEM/Alur et al_2004_A Temporal Logic of Nested Calls and Returns.pdf}
}



@inproceedings{gorostiagaHLolaVeryFunctional2021,
  title = {{{HLola}}: A {{Very Functional Tool}} for {{Extensible Stream Runtime Verification}}},
  shorttitle = {{{HLola}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Gorostiaga, Felipe and Sánchez, César},
  editor = {Groote, Jan Friso and Larsen, Kim Guldstrand},
  date = {2021},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {349--356},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-72013-1_18},
  abstract = {We present HLola, an extensible Stream Runtime Verification (SRV) tool, that borrows from the functional language Haskell (1) rich types for data in events and verdicts; and (2) functional features for parametrization, libraries, high-order specification transformations, etc.},
  isbn = {978-3-030-72013-1},
  langid = {english},
  file = {/home/remo/Zotero/storage/JUPFCCIX/Gorostiaga_Sánchez_2021_HLola.pdf}
}



@inproceedings{gorostiagaHStriverVeryFunctional2021,
  title = {{{HStriver}}: {{A Very Functional Extensible Tool}} for the {{Runtime Verification}} of {{Real-Time Event Streams}}},
  shorttitle = {{{HStriver}}},
  booktitle = {Formal {{Methods}}},
  author = {Gorostiaga, Felipe and Sánchez, César},
  editor = {Huisman, Marieke and Păsăreanu, Corina and Zhan, Naijun},
  date = {2021},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {563--580},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-90870-6_30},
  abstract = {We present HStriver, an extensible stream runtime verification tool for event streams. The tool consists of a runtime verification engine for (1) real-time events streams where individual observations and verdicts can occur at arbitrary times, and (2) rich data in the observations and verdicts. This rich setting allows, for example, encoding as HStriver specifications quantitative semantics of logics like STL, including different notions of robustness.},
  isbn = {978-3-030-90870-6},
  langid = {english},
  file = {/home/remo/Zotero/storage/NJST66HS/Gorostiaga_Sánchez_2021_HStriver.pdf}
}



@inproceedings{basinFormallyVerifiedOptimized2020,
  title = {A Formally Verified, Optimized Monitor for Metric First-Order Dynamic Logic},
  booktitle = {International {{Joint Conference}} on {{Automated Reasoning}}},
  author = {Basin, David and Dardinier, Thibault and Heimes, Lukas and Krstić, Sr\textbackslash djan and Raszyk, Martin and Schneider, Joshua and Traytel, Dmitriy},
  date = {2020},
  pages = {432--453},
  publisher = {{Springer}},
  file = {/home/remo/Zotero/storage/EQGWWYKV/Basin et al_2020_A formally verified, optimized monitor for metric first-order dynamic logic.pdf;/home/remo/Zotero/storage/SV9YJI89/Basin et al_2020_A formally verified, optimized monitor for metric first-order dynamic logic.pdf;/home/remo/Zotero/storage/64TFN4JP/978-3-030-51074-9_25.html}
}



@article{barringerFormalAnalysisLog2010,
  title = {Formal Analysis of Log Files},
  author = {Barringer, Howard and Groce, Alex and Havelund, Klaus and Smith, Margaret},
  date = {2010},
  journaltitle = {Journal of aerospace computing, information, and communication},
  volume = {7},
  number = {11},
  pages = {365--390},
  file = {/home/remo/Zotero/storage/H6LPVJVK/Barringer et al_2010_Formal analysis of log files.pdf}
}



@inproceedings{bleinExtendingSpecificationPatterns2018,
  title = {Extending Specification Patterns for Verification of Parametric Traces},
  booktitle = {Proceedings of the 6th {{Conference}} on {{Formal Methods}} in {{Software Engineering}}},
  author = {Blein, Yoann and Ledru, Yves and du- Bousquet, Lydie and Groz, Roland},
  options = {useprefix=true},
  date = {2018-06-02},
  series = {{{FormaliSE}} '18},
  pages = {10--19},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3193992.3193998},
  url = {https://doi.org/10.1145/3193992.3193998},
  urldate = {2022-08-23},
  abstract = {This article proposes a temporal and parametric specification language (PARTRAP) developed for the verification of execution traces. The language extends specification patterns with nested scopes, real-time and first-order quantification over the data inside a JSON trace, while remaining pragmatic. Its design was directed by a case study in the medical field (computer aided surgery). The paper briefly presents the case study and details the design rationale, syntax and semantics of the language. The language has been implemented and several properties have been successfully evaluated over a corpus of 100 surgery traces.},
  isbn = {978-1-4503-5718-0},
  keywords = {parametric events,runtime verification,temporal specification,trace analysis},
  file = {/home/remo/Zotero/storage/HTU4PDJ2/Blein et al_2018_Extending specification patterns for verification of parametric traces.pdf}
}

@preamble{ "\ifdefined\DeclarePrefChars\DeclarePrefChars{'’-}\else\fi " }


@inproceedings{halleRuntimeMonitoringMessageBased2008,
  title = {Runtime {{Monitoring}} of {{Message-Based Workflows}} with {{Data}}},
  booktitle = {2008 12th {{International IEEE Enterprise Distributed Object Computing Conference}}},
  author = {Halle, Sylvain and Villemaire, Roger},
  date = {2008-09},
  pages = {63--72},
  issn = {1541-7719},
  doi = {10.1109/EDOC.2008.32},
  abstract = {We present an algorithm for the runtime monitoring of business process properties with data parameterization. The properties are expressed in LTL-FO+, an extension to traditional Linear Temporal Logic that includes full first-order quantification over the data inside a trace of XML messages. The algorithm works "on-the-fly": it keeps in memory only the states that are necessary at each step. Initial results indicate that LTL-FO+ is an appropriate language for expressing data dependencies on message traces and that its processing overhead on sample traces is acceptable.},
  eventtitle = {2008 12th {{International IEEE Enterprise Distributed Object Computing Conference}}},
  keywords = {Business,Data models,data-aware,first-order quantification,Monitoring,Runtime,runtime monitoring,temporal logic,Unified modeling language,web services,Web services,XML},
  file = {/home/remo/Zotero/storage/RNRRVDJU/Halle_Villemaire_2008_Runtime Monitoring of Message-Based Workflows with Data.pdf;/home/remo/Zotero/storage/EVW8CG68/4634758.html}
}



@inproceedings{faymonvilleStreamBasedSpecificationLanguage2016,
  title = {A {{Stream-Based Specification Language}} for {{Network Monitoring}}},
  booktitle = {Runtime {{Verification}}},
  author = {Faymonville, Peter and Finkbeiner, Bernd and Schirmer, Sebastian and Torfah, Hazem},
  editor = {Falcone, Yliès and Sánchez, César},
  date = {2016},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {152--168},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-46982-9_10},
  abstract = {We introduce Lola 2.0, a stream-based specification language for the precise description of complex security properties in network traffic. The language extends the specification language Lola~with two new features: template stream expressions, which allow input data to be carried along the stream, and dynamic stream generation, where new monitors can be invoked during the monitoring process for the monitoring of new subtasks on their own time scale. Lola 2.0 is simple and expressive: it combines the ease-of-use of rule-based specification languages like Snort with the expressiveness of heavy-weight scripting languages or temporal logics previously needed for the description of complex stateful dependencies and statistical measures. Lola 2.0 specifications are monitored by incrementally constructing output streams from input streams, while maintaining a store of partially evaluated expressions. We demonstrate the flexibility and expressivity of Lola 2.0 using a prototype implementation on several practical examples.},
  isbn = {978-3-319-46982-9},
  langid = {english},
  keywords = {Monitoring,Network intrusion detection,Runtime verification},
  file = {/home/remo/Zotero/storage/TPHC3FX3/Faymonville et al_2016_A Stream-Based Specification Language for Network Monitoring.pdf}
}



@inproceedings{halleModelCheckingDataAware2007,
  title = {Model {{Checking Data-Aware Workflow Properties}} with {{CTL-FO}}+},
  booktitle = {11th {{IEEE International Enterprise Distributed Object Computing Conference}} ({{EDOC}} 2007)},
  author = {Halle, Sylvain and Villemaire, Roger and Cherkaoui, Omar and Ghandour, Boubker},
  date = {2007-10},
  pages = {267--267},
  issn = {1541-7719},
  doi = {10.1109/EDOC.2007.36},
  abstract = {Most works that extend workflow validation beyond syntactical checking consider constraints on the sequence of messages exchanged between services. However, these constraints are expressed only in terms of message names and abstract away their actual data content. Using the context of the User-controlled Lightpath initiative (UCLP) hosted by the CANARIE consortium, we provide examples of real- world "data-aware" web service constraints where the sequence of messages and their content are interdependent. We present CTL-FO+, an extension over Computation Tree Logic that includes first-order quantification on state variables in addition to temporal operators. We show how CTL- FO+ is adequate for expressing data-aware constraints, give a complete model checking algorithm for CTL-FO+ and establish its complexity to be PSPACE-complete. This makes using CTL-FO+ for validating workflow properties no harder than using the Linear Temporal Logic (LTL) already used by some web service tools. Finally, we show how the modelling of data-aware properties is an increase in expressiveness that cannot be efficiently simulated by these tools.},
  eventtitle = {11th {{IEEE International Enterprise Distributed Object Computing Conference}} ({{EDOC}} 2007)},
  keywords = {Context-aware services,Councils,Distributed computing,Formal languages,Guidelines,Logic,Simple object access protocol,Standards organizations,Web and internet services,Web services},
  file = {/home/remo/Zotero/storage/GW7ZUMQ2/Halle et al_2007_Model Checking Data-Aware Workflow Properties with CTL-FO+.pdf;/home/remo/Zotero/storage/C5BQQA86/4383999.html}
}



@article{bauerRuntimeVerificationLTL2011,
  title = {Runtime {{Verification}} for {{LTL}} and {{TLTL}}},
  author = {Bauer, Andreas and Leucker, Martin and Schallhart, Christian},
  date = {2011-09-01},
  journaltitle = {ACM Transactions on Software Engineering and Methodology},
  shortjournal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {20},
  number = {4},
  pages = {14:1--14:64},
  issn = {1049-331X},
  doi = {10.1145/2000799.2000800},
  url = {https://doi.org/10.1145/2000799.2000800},
  urldate = {2022-08-25},
  abstract = {This article studies runtime verification of properties expressed either in lineartime temporal logic (LTL) or timed lineartime temporal logic (TLTL). It classifies runtime verification in identifying its distinguishing features to model checking and testing, respectively. It introduces a three-valued semantics (with truth values true, false, inconclusive) as an adequate interpretation as to whether a partial observation of a running system meets an LTL or TLTL property. For LTL, a conceptually simple monitor generation procedure is given, which is optimal in two respects: First, the size of the generated deterministic monitor is minimal, and, second, the monitor identifies a continuously monitored trace as either satisfying or falsifying a property as early as possible. The feasibility of the developed methodology is demontrated using a collection of real-world temporal logic specifications. Moreover, the presented approach is related to the properties monitorable in general and is compared to existing concepts in the literature. It is shown that the set of monitorable properties does not only encompass the safety and cosafety properties but is strictly larger. For TLTL, the same road map is followed by first defining a three-valued semantics. The corresponding construction of a timed monitor is more involved, yet, as shown, possible.},
  keywords = {Assertion checkers,monitors,runtime verification},
  file = {/home/remo/Zotero/storage/8PC9Y2IK/Bauer et al_2011_Runtime Verification for LTL and TLTL.pdf}
}



@inproceedings{gorostiagaStriverStreamRuntime2018,
  title = {Striver: {{Stream Runtime Verification}} for {{Real-Time Event-Streams}}},
  shorttitle = {Striver},
  booktitle = {Runtime {{Verification}}},
  author = {Gorostiaga, Felipe and Sánchez, César},
  editor = {Colombo, Christian and Leucker, Martin},
  date = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {282--298},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-03769-7_16},
  abstract = {We study the problem of monitoring rich properties of real-time event streams, and propose a solution based on Stream Runtime Verification (SRV), where observations are described as output streams of data computed from input streams of data. SRV allows a clean separation between the temporal dependencies among incoming events, and the concrete operations that are performed during the monitoring.},
  isbn = {978-3-030-03769-7},
  langid = {english},
  file = {/home/remo/Zotero/storage/BXZMU8A4/Gorostiaga_Sánchez_2018_Striver.pdf}
}



@article{dankrsticAlmostEventRateIndependent,
  title = {Almost {{Event-Rate Independent Monitoring}} of {{Metric Dynamic Logic}}},
  author = {dan Krstic, David Basin Sr and Traytel, Dmitriy},
  options = {useprefix=true},
  file = {/home/remo/Zotero/storage/QC9RIRPY/dan Krstic and Traytel - Almost Event-Rate Independent Monitoring of Metric.pdf}
}



@article{chomickiEfficientCheckingTemporal1995,
  title = {Efficient Checking of Temporal Integrity Constraints Using Bounded History Encoding},
  author = {Chomicki, Jan},
  date = {1995},
  journaltitle = {ACM Transactions on Database Systems (TODS)},
  volume = {20},
  number = {2},
  pages = {149--186},
  publisher = {{ACM New York, NY, USA}},
  file = {/home/remo/Zotero/storage/FCR4UU7J/Chomicki_1995_Efficient checking of temporal integrity constraints using bounded history.pdf;/home/remo/Zotero/storage/4MNTDA85/210197.html}
}

@article{traytel16MetricFirstOrder,
  title = {3.16 {{Metric First-Order Dynamic Logic}} and {{Beyond}}},
  author = {Traytel, Dmitriy},
  journaltitle = {A Shared Challenge in Behavioural Specification},
  pages = {72}
}



@article{leuckerBriefAccountRuntime2009,
  title = {A Brief Account of Runtime Verification},
  author = {Leucker, Martin and Schallhart, Christian},
  date = {2009-05-01},
  journaltitle = {The Journal of Logic and Algebraic Programming},
  shortjournal = {The Journal of Logic and Algebraic Programming},
  series = {The 1st {{Workshop}} on {{Formal Languages}} and {{Analysis}} of {{Contract-Oriented Software}} ({{FLACOS}}’07)},
  volume = {78},
  number = {5},
  pages = {293--303},
  issn = {1567-8326},
  doi = {10.1016/j.jlap.2008.08.004},
  url = {https://www.sciencedirect.com/science/article/pii/S1567832608000775},
  urldate = {2022-08-23},
  abstract = {In this paper, a brief account of the field of runtime verification is given. Starting with a definition of runtime verification, a comparison to well-known verification techniques like model checking and testing is provided, and applications in which runtime verification brings out its distinguishing features are pointed out. Moreover, extensions of runtime verification such as monitor-oriented programming, and monitor-based runtime reflection are sketched and their similarities and differences are discussed. Finally, the use of runtime verification for contract enforcement is briefly pointed out.},
  langid = {english},
  keywords = {Assertion checking,Monitoring,Testing,Verification},
  file = {/home/remo/Zotero/storage/TLFGIRTD/Leucker_Schallhart_2009_A brief account of runtime verification.pdf;/home/remo/Zotero/storage/FA6QYJR9/S1567832608000775.html}
}



@article{basinMonitoringTemporalFirstorder2015,
  title = {Monitoring of Temporal First-Order Properties with Aggregations},
  author = {Basin, David and Klaedtke, Felix and Marinovic, Srdjan and Zălinescu, Eugen},
  date = {2015},
  journaltitle = {Formal methods in system design},
  volume = {46},
  number = {3},
  pages = {262--285},
  publisher = {{Springer}},
  file = {/home/remo/Zotero/storage/YI5U8J7L/s10703-015-0222-7.html}
}



@inproceedings{havelundRuntimeVerificationPropositional2018,
  title = {Runtime {{Verification}}: {{From Propositional}} to {{First-Order Temporal Logic}}},
  shorttitle = {Runtime {{Verification}}},
  booktitle = {Runtime {{Verification}}},
  author = {Havelund, Klaus and Peled, Doron},
  editor = {Colombo, Christian and Leucker, Martin},
  date = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {90--112},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-03769-7_7},
  abstract = {Runtime Verification is a branch of formal methods concerned with analysis of execution traces for the purpose of determining the state or general quality of the executing system. The field covers numerous approaches, one of which is specification-based runtime verification, where execution traces are checked against formal specifications. The paper presents syntax, semantics, and monitoring algorithms for respectively propositional and first-order temporal logics. In propositional logics the observed events in the execution trace are represented using atomic propositions, while first-order logic allows universal and existential quantification over data occurring as arguments in events. Monitoring of the first-order case is drastically more challenging than the propositional case, and we present a solution for this problem based on BDDs. We furthermore discuss monitorability of temporal properties by dividing them into different classes representing different degrees of monitorability.},
  isbn = {978-3-030-03769-7},
  langid = {english},
  keywords = {Fail Verdict,Finitely Refutable,Good Preﬁx,Monitoring Properties,Runtime Veriﬁcation (RV)},
  file = {/home/remo/Zotero/storage/YKF5RRCE/Havelund_Peled_2018_Runtime Verification.pdf}
}



@online{IcPolicymonitoringMaster,
  title = {Ic/Policy-Monitoring at Master · Dfinity/Ic},
  url = {https://github.com/dfinity/ic/tree/master/policy-monitoring},
  urldate = {2022-08-29},
  file = {/home/remo/Zotero/storage/PMVSXCJ8/policy-monitoring.html}
}


